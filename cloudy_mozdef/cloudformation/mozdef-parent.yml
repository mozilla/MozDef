AWSTemplateFormatVersion: 2010-09-09
Description: Deploy MozDef into AWS
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: VPC Settings
      Parameters:
      - VpcId
      - PublicSubnetIds
    - Label:
        default: EC2 Instance
      Parameters:
      - InstanceType
      - KeyName
      - AMIImageId
    - Label:
        default: Certificate
      Parameters:
        - ACMCertArn
    - Label:
        default: OIDC Configuration
      Parameters:
        - OIDCDiscoveryURL
        - OIDCClientId
        - OIDCClientSecret
    - Label:
        default: Template Location
      Parameters:
        - S3TemplateLocation
    ParameterLabels:
      VpcId:
        default: VPC ID
      PublicSubnetIds:
        default: Public Subnet IDs
      InstanceType:
        default: EC2 Instance Type
      KeyName:
        default: EC2 SSH Key Name
      AMIImageId:
        default: EC2 AMI Image ID
      DomainName:
        default: FQDN to host MozDef at
      ACMCertArn:
        default: ACM Certificate ARN
      OIDCDiscoveryURL:
        default: OIDC Discovery URL
      OIDCClientId:
        default: OIDC Client ID
      OIDCClientSecret:
        default: OIDC Client Secret
      S3TemplateLocation:
        default: S3 Template Location URL
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'The VPC ID of the VPC to deploy in (Example : vpc-abcdef12)'
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'A comma delimited list of public subnet IDs (Example: subnet-abcdef12,subnet-bcdef123)'
  InstanceType:
    Type: String
    Description: EC2 instance type, e.g. m1.small, m1.large, etc.
    Default: m5.large
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
  AMIImageId:
    Type: AWS::EC2::Image::Id
    Description: The AMI Image ID to use of the EC2 instance
    Default: ami-073434079b0366251
  DomainName:
    Type: String
    Description: The fully qualified DNS name you will host CloudyMozDef at.
    Default: cloudymozdef.security.allizom.org
  ACMCertArn:
    Type: String
    Description: "The ARN of your pre-issued ACM cert. (Example: arn:aws:acm:us-west-2:123456789012:certificate/abcdef01-2345-6789-abcd-ef0123456789)"
  OIDCDiscoveryURL:
    Type: String
    AllowedPattern: '^https?:\/\/.*'
    ConstraintDescription: A valid URL
    Description: "The URL of your OIDC provider's well-known discovery URL (Example: https://auth.example.com/.well-known/openid-configuration)"
  OIDCClientId:
    Type: String
    Description: The client ID that your OIDC provider issues you for your Mozdef instance.
  OIDCClientSecret:
    Type: String
    Description: The secret that your OIDC provider issues you for your Mozdef instance.
    NoEcho: true
  S3TemplateLocation:
    Type: String
    AllowedPattern: '^https?:\/\/.*\.amazonaws\.com\/.*'
    ConstraintDescription: A valid amazonaws.com S3 URL
    Description: "The URL to the S3 bucket used to fetch the nested stack templates (Example: https://s3-us-west-2.amazonaws.com/example-bucket-name/cloudformation/path/)"
Resources:
  MozDefSecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcId: !Ref VpcId
      Tags:
        - Key: application
          Value: mozdef
      TemplateURL: !Join [ '', [ !Ref S3TemplateLocation, mozdef-security-group.yml ] ]
  MozDefIAMRoleAndInstanceProfile:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CloudTrailS3BucketName: !GetAtt MozDefCloudTrail.Outputs.CloudTrailS3BucketName
        CloudTrailSQSQueueArn: !GetAtt MozDefCloudTrail.Outputs.CloudTrailSQSQueueArn
        MozDefSQSQueueArn: !GetAtt MozDefSQS.Outputs.SQSQueueArn
        # CloudTrailS3BucketIAMRoleArn we leave empty as we will consume CloudTrail logs from our own account
        ESServiceLinkedRoleExists: !GetAtt ESServiceLinkedRoleExists.RoleExists
      Tags:
        - Key: application
          Value: mozdef
      TemplateURL: !Join [ '', [ !Ref S3TemplateLocation, base-iam.yml ] ]
  MozDefInstance:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcId: !Ref VpcId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        IamInstanceProfile: !GetAtt MozDefIAMRoleAndInstanceProfile.Outputs.InstanceProfileArn
        AutoScaleGroupSubnetIds: !Join [ ',', !Ref PublicSubnetIds ]
        AMIImageId: !Ref AMIImageId
        EFSID: !GetAtt MozDefEFS.Outputs.EFSID
        MozDefSecurityGroupId: !GetAtt MozDefSecurityGroups.Outputs.MozDefSecurityGroupId
        MozDefLoadBalancerSecurityGroupId: !GetAtt MozDefSecurityGroups.Outputs.MozDefLoadBalancerSecurityGroupId
        MozDefACMCertArn: !Ref ACMCertArn
        ESURL: !GetAtt MozDefES.Outputs.ElasticsearchURL
        KibanaURL: !GetAtt MozDefES.Outputs.ElasticsearchKibanaURL
        KibanaDomainOnlyURL: !GetAtt MozDefES.Outputs.ElasticsearchDomainOnlyURL
        OIDCClientId: !Ref OIDCClientId
        OIDCClientSecret: !Ref OIDCClientSecret
        OIDCDiscoveryURL: !Ref OIDCDiscoveryURL
        CloudTrailSQSNotificationQueueName: !GetAtt MozDefCloudTrail.Outputs.CloudTrailSQSQueueName
        MozDefSQSQueueName: !GetAtt MozDefSQS.Outputs.SQSQueueName
        DomainName: !Ref DomainName
      Tags:
        - Key: application
          Value: mozdef
        - Key: stack
          Value: !Ref AWS::StackName
      TemplateURL: !Join [ '', [ !Ref S3TemplateLocation, mozdef-instance.yml ] ]
  MozDefES:
    Type: AWS::CloudFormation::Stack
    DependsOn: MozDefIAMRoleAndInstanceProfile
    Properties:
      Parameters:
        SubnetIds: !Join [ ',', !Ref PublicSubnetIds ]
        BlockStoreSizeGB: '100'
        VpcId: !Ref VpcId
        MozDefInstanceSecurityGroup: !GetAtt MozDefSecurityGroups.Outputs.MozDefSecurityGroupId
        ESInstanceCount: '1'
      Tags:
        - Key: application
          Value: mozdef
        - Key: stack
          Value: !Ref AWS::StackName
      TemplateURL: !Join [ '', [ !Ref S3TemplateLocation, mozdef-es.yml ] ]
  MozDefEFS:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcId: !Ref VpcId
        SubnetList: !Join [ ',', !Ref PublicSubnetIds ]
        NumberOfSubnets: !GetAtt NumberOfSubnets.Length
        MozDefSecurityGroup: !GetAtt MozDefSecurityGroups.Outputs.MozDefSecurityGroupId
      Tags:
        - Key: application
          Value: mozdef
        - Key: stack
          Value: !Ref AWS::StackName
      TemplateURL: !Join [ '', [ !Ref S3TemplateLocation, mozdef-efs.yml ] ]
  MozDefSQS:
    Type: AWS::CloudFormation::Stack
    Properties:
      Tags:
      - Key: application
        Value: mozdef
      - Key: stack
        Value: !Ref AWS::StackName
      TemplateURL: !Join [ '', [ !Ref S3TemplateLocation, mozdef-sqs.yml ] ]
  MozDefCloudTrail:
    Type: AWS::CloudFormation::Stack
    Properties:
      Tags:
      - Key: application
        Value: mozdef
      - Key: stack
        Value: !Ref AWS::StackName
      TemplateURL: !Join [ '', [ !Ref S3TemplateLocation, mozdef-cloudtrail.yml ] ]
  CloudFormationLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        -
          PolicyName: AllowLambdaLogging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:*
                  - iam:ListRoles
                Resource: '*'
  GetArrayLengthLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: CloudFormationLambdaIAMRole
    # This DependsOn shouldn't be needed because the "Role" value is set to
    # "!GetAtt CloudFormationLambdaIAMRole.Arn" but without DependsOn the error
    # "Template error: IAM role mozdef-aws-nested-CloudFormationLambdaIAMRole-108UCUPESC6WG doesn't exist"
    # occurs on stack creation for this Lambda Function resource. The DependsOn
    # prevents the error.
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import secrets, string
          def handler(event, context):
            length = len(event['ResourceProperties']['Array'])
            physical_id = ''.join(secrets.choice(string.ascii_uppercase + string.digits) for i in range(13))
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Length': length}, "GetArrayLength-%s" % physical_id)
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt CloudFormationLambdaIAMRole.Arn
      Tags:
        - Key: application
          Value: mozdef
        - Key: stack
          Value: !Ref AWS::StackName
      Timeout: 20
  NumberOfSubnets:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Array: !Ref PublicSubnetIds
      ServiceToken: !GetAtt GetArrayLengthLambdaFunction.Arn
  DoesRoleExistLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: CloudFormationLambdaIAMRole
    # This DependsOn shouldn't be needed because the "Role" value is set to
    # "!GetAtt CloudFormationLambdaIAMRole.Arn" but without DependsOn the error
    # "Template error: IAM role mozdef-aws-nested-CloudFormationLambdaIAMRole-108UCUPESC6WG doesn't exist"
    # occurs on stack creation for this Lambda Function resource. The DependsOn
    # prevents the error.
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import boto3, secrets, string
          def handler(event, context):
              paginator = boto3.client('iam').get_paginator('list_roles')
              args = {'PathPrefix': event['ResourceProperties']['PathPrefix']} if 'PathPrefix' in event['ResourceProperties'] else {}
              iterator = paginator.paginate(**args).search(
                  "Roles[?RoleName == '%s'][]" % event['ResourceProperties']['RoleName'])
              response = {'RoleExists': len([x for x in iterator]) > 0}
              physical_id = ''.join(
                  secrets.choice(string.ascii_uppercase + string.digits) for i in
                  range(13))
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response,
                               "DoesRoleExist-%s" % physical_id)
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt CloudFormationLambdaIAMRole.Arn
      Tags:
        - Key: application
          Value: mozdef
        - Key: stack
          Value: !Ref AWS::StackName
      Timeout: 20
  ESServiceLinkedRoleExists:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      RoleName: AWSServiceRoleForAmazonElasticsearchService
      PathPrefix: '/aws-service-role/es.amazonaws.com/'
      ServiceToken: !GetAtt DoesRoleExistLambdaFunction.Arn
