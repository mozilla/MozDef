AWSTemplateFormatVersion: 2010-09-09
Description: Deploy MozDef autoscaled EC2 instance group and ALB into AWS
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID of the VPC to deploy in
  InstanceType:
    Type: String
    Description: EC2 instance type, e.g. m1.small, m1.large, etc.
    Default: m5.large
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
  IamInstanceProfile:
    Type: String
    Description: The ARN of the IAM Instance Profile
  AutoScaleGroupSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: A comma delimited list of subnet IDs
  AMIImageId:
    Type: AWS::EC2::Image::Id
    Description: The AMI Image ID to use of the EC2 instance
  EFSID:
    Type: String
    Description: Logical ID of the EFS Filesystem
  EFSMountPoint:
    Type: String
    Description: Directory to mount EFS to
    Default: '/var/lib/mongodb'
  MozDefSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The security group to apply to the EC2 instance
  MozDefLoadBalancerSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The security group to apply to the EC2 instance
  ACMCertArn:
    Type: String
    Description: The arn of your pre-issued certificate for ssl termination.
  ESURL:
    Type: String
    Description: The AWS ES endpoint URL
    Default: http://elasticsearch.example.com/
  KibanaURL:
    Type: String
    Description: The AWS ES Kibana complete URL
    Default: https://kibana.example.com/_plugin/kibana
  KibanaDomainOnlyURL:
    Type: String
    Description: The AWS ES Kibana URL with domain only
    Default: https://kibana.example.com/
  OIDCAuthorizationEndpoint:
    Type: String
    Default: ''
    ConstraintDescription: A valid URL
    Description: "The URL of the authorization endpoint found for your OIDC provider generaly found on (Example: https://auth.example.com/.well-known/openid-configuration)"
  OIDCClientId:
    Type: String
    Default: ''
    Description: The client ID that your OIDC provider issues you for your Mozdef instance.
  OIDCClientSecret:
    Type: String
    Default: ''
    Description: The secret that your OIDC provider issues you for your Mozdef instance.
    NoEcho: true
  OIDCIssuer:
    Type: String
    Default: ''
    Description: Generally can be found at the .well-known endpoint for your provider.
  OIDCTokenEndpoint:
    Type: String
    Default: ''
    Description: Generally can be found at the .well-known endpoint for your provider.
  OIDCUserInfoEndpoint:
    Type: String
    Default: ''
    Description: Generally can be found at the .well-known endpoint for your provider.
  CloudTrailSQSNotificationQueueName:
    Type: String
    Description: The name of the SQS used for CloudTrail notifications.
  MozDefSQSQueueName:
    Type: String
    Description: The name of the generic SQS queue used to pickup events.
  DomainName:
    Type: String
    Description: The fully qualified domain you'll be hosting MozDef at.
  AlertQueueUrl:
    Type: String
    Description: The url of the alert queue kombu should use for taskExchange.
  ALBBasicAuthSecret:
    Type: String
    Default: ''
    Description: Default basic authentication password, if enabled.
    NoEcho: true
Rules:
  ALBBasicAuthOnly:
    RuleCondition: !Not [ !Equals [ !Ref 'ALBBasicAuthSecret', '' ] ]
    Assertions:
    - Assert:
        !EachMemberEquals
        - - !Ref 'OIDCAuthorizationEndpoint'
          - !Ref 'OIDCClientId'
          - !Ref 'OIDCClientSecret'
          - !Ref 'OIDCIssuer'
          - !Ref 'OIDCTokenEndpoint'
          - !Ref 'OIDCUserInfoEndpoint'
        - ''
      AssertDescription: >
        If you set an ALBBasicAuthSecret indicating you wish to use HTTP Basic
        Auth for authentication, you must leave all OIDC attributes blank
  OIDCHasAllRequiredParameters:
    RuleCondition:
      !Or
      - !Not [ !Equals [ !Ref 'OIDCAuthorizationEndpoint', '' ] ]
      - !Not [ !Equals [ !Ref 'OIDCClientId', '' ] ]
      - !Not [ !Equals [ !Ref 'OIDCClientSecret', '' ] ]
      - !Not [ !Equals [ !Ref 'OIDCIssuer', '' ] ]
      - !Not [ !Equals [ !Ref 'OIDCTokenEndpoint', '' ] ]
      - !Not [ !Equals [ !Ref 'OIDCUserInfoEndpoint', '' ] ]
    Assertions:
    - Assert:
        !And
        - !Not [ !Equals [ !Ref 'OIDCAuthorizationEndpoint', '' ] ]
        - !Not [ !Equals [ !Ref 'OIDCClientId', '' ] ]
        - !Not [ !Equals [ !Ref 'OIDCClientSecret', '' ] ]
        - !Not [ !Equals [ !Ref 'OIDCIssuer', '' ] ]
        - !Not [ !Equals [ !Ref 'OIDCTokenEndpoint', '' ] ]
        - !Not [ !Equals [ !Ref 'OIDCUserInfoEndpoint', '' ] ]
        - !Not [ !Equals [ !Ref 'ACMCertArn', '' ] ]
      AssertDescription: >
        If you set any OIDC parameter indicating you wish to use OIDC for
        authentication, you must set all six OIDC parameters, [
        OIDCAuthorizationEndpoint, OIDCClientId, OIDCClientSecret, OIDCIssuer,
        OIDCTokenEndpoint, OIDCUserInfoEndpoint] as well as an ACM Certificate
        in the ACMCertArn parameter
  SomeAuthHasBeenConfigured:
    Assertions:
    - Assert:
        !Or
        - !Not [ !Equals [ !Ref 'OIDCClientId', '' ] ]
        - !Not [ !Equals [ !Ref 'ALBBasicAuthSecret', '' ] ]
      AssertDescription: >
        You must choose either to use HTTP Basic Auth or OIDC for authentication.
        To choose HTTP Basic Auth you must set an ALBBasicAuthSecret. To choose
        OIDC you must set all six OIDC parameters, [OIDCAuthorizationEndpoint,
        OIDCClientId, OIDCClientSecret, OIDCIssuer, OIDCTokenEndpoint,
        OIDCUserInfoEndpoint] as well as an ACM Certificate in the ACMCertArn
        parameter.
Conditions:
  OIDCEnabledCondition:
    !Not [!Equals [!Ref OIDCClientId, '']]
  OIDCNotEnabledCondition:
    !Equals [!Ref OIDCClientId, '']
  SSLEnabledCondition:
    !And [!Not [!Equals [!Ref ACMCertArn, '']], !Equals [!Ref OIDCClientId, '']]
  SSLNotEnabledCondition:
    !And [!Equals [!Ref ACMCertArn, ''], !Equals [!Ref OIDCClientId, '']]
  SSLEnabledWithOidcCondition:
    !And [!Not [!Equals [!Ref ACMCertArn, '']], !Not [!Equals [!Ref OIDCClientId, '']]]
Resources:
  MozDefElasticLoadBalancingV2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: '/health'
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: application
          Value: mozdef
        - Key: stack
          Value: !Ref AWS::StackName
      VpcId: !Ref VpcId
  MozDefElasticLoadBalancingV2TargetGroupKibana:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: '/health'
      Port: 9090
      Protocol: HTTP
      Tags:
        - Key: application
          Value: mozdef
        - Key: stack
          Value: !Ref AWS::StackName
      VpcId: !Ref VpcId
  MozDefLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId: !Ref AMIImageId
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 14
            VolumeType: gp2
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref MozDefSecurityGroupId
      UserData:
        Fn::Base64: !Sub |
          #cloud-config

          packages:
            - amazon-efs-utils
          write_files:
            - content: |
                # Cloudy MozDef env file as imported by docker compose.
                # Drives the configuration of variables for a variety of containers.
                OIDC_CLIENT_ID=${OIDCClientId}
                OPTIONS_ESSERVERS=${ESURL}
                # Private unauthed kibana url for accessing kibana API
                OPTIONS_KIBANAURL=${KibanaURL}
                # The OPTIONS_METEOR_KIBANAURL uses the reserved word "relative" which triggers MozDef
                # to use relative links to Kibana : https://github.com/mozilla/MozDef/pull/956
                OPTIONS_METEOR_KIBANAURL=http://relative:9090/_plugin/kibana/
                OPTIONS_METEOR_ROOTURL=https://${DomainName}
                METEOR_BACKEND=meteor:3000
                ESBACKEND=${KibanaDomainOnlyURL}
                # Disable certain web ui features
                OPTIONS_REMOVE_FEATURES=ipblocklist,fqdnblocklist
                # See https://github.com/mozilla-iam/mozilla.oidc.accessproxy/blob/master/README.md#setup
                # Future support will be added for cognito backed authentication.
                client_id=${OIDCClientId}
                client_secret=${OIDCClientSecret}
                BASIC_AUTH_SECRET=${ALBBasicAuthSecret}
                basic_auth_secret=${ALBBasicAuthSecret}
                backend=http://meteor:3000
                redirect_uri_path=/redirect_uri
                httpsredir=no
                # Meteor settings
                # Mongo is discovered through the local docker-compose network.
                # These are not typos.
                MONGO_URL=mongodb://mongodb:3002/meteor
                ROOT_URL=http://localhost
                OPTIONS_METEOR_PORT=3000
                OPTIONS_METEOR_AUTHENTICATIONTYPE=oidc
                ES={"servers": [${ESURL}]}
                cookiename=sesmeteor
                # Increase the AWS ES total fields limit from 1000 to 4000
                OPTIONS_MAPPING_TOTAL_FIELDS_LIMIT=4000
                OPTIONS_ALERTSQSQUEUEURL=${AlertQueueUrl}
                OPTIONS_MQPROTOCOL=sqs
                DEFAULT_AWS_REGION=${AWS::Region}
              path: /opt/mozdef/docker/compose/cloudy_mozdef.env
            - content: |
                #!/usr/bin/env python

                # config.py file drives the alert worker container consuming messages from rabbitmq
                # This is slated for future refactor to config and code that drives celery

                # This Source Code Form is subject to the terms of the Mozilla Public
                # License, v. 2.0. If a copy of the MPL was not distributed with this
                # file, You can obtain one at https://mozilla.org/MPL/2.0/.
                # Copyright (c) 2014 Mozilla Corporation
                import logging
                import time

                from celery.schedules import crontab
                from celery.schedules import timedelta
                from os import getenv

                logger = logging.getLogger(__name__)

                # XXX TBD find a way to make this configurable outside of deploys.
                ALERTS = {
                    'bruteforce_ssh.AlertBruteforceSsh': {'schedule': crontab(minute='*/1')},
                    'unauth_ssh.AlertUnauthSSH': {'schedule': crontab(minute='*/1')},
                    'get_watchlist.AlertWatchList': {'schedule': timedelta(minutes=1)},
                    'guard_duty_probe.AlertGuardDutyProbe': {'schedule': crontab(minute='*/1')},
                    'cloudtrail_logging_disabled.AlertCloudtrailLoggingDisabled': {'schedule': timedelta(minutes=1)},
                    'cloudtrail_deadman.AlertCloudtrailDeadman': {'schedule': timedelta(minutes=15)},
                    'cloudtrail_public_bucket.AlertCloudtrailPublicBucket': {'schedule': timedelta(minutes=1)},
                    'cloudtrail_excessive_describe.AlertCloudtrailExcessiveDescribe': {'schedule': timedelta(minutes=1)},
                }

                ALERT_PLUGINS = [
                    # 'relative pythonfile name (exclude the .py) - EX: sso_dashboard',
                ]

                # Rabbit MQ Password now comes from the docker environment per host.
                RABBITMQ = {
                    'mqserver': 'rabbitmq',
                    'mquser': 'mozdef',
                    'mqpassword': getenv('RABBITMQ_PASSWORD'),
                    'mqport': 5672,
                    'alertexchange': 'alerts',
                    'alertqueue': 'mozdef.alert'
                }

                ES = {
                    'servers': ["${ESURL}"]
                }

                OPTIONS = {
                    'defaulttimezone': 'UTC',
                }

                LOGGING = {
                    'version': 1,
                    'disable_existing_loggers': True,
                    'formatters': {
                        'simple': {
                            'format': '%(levelname)s %(message)s',
                            'datefmt': '%y %b %d, %H:%M:%S',
                        },
                        'standard': {
                            'format': '%(asctime)s [%(levelname)s] %(name)s %(filename)s:%(lineno)d: %(message)s'
                        }
                    },
                    'handlers': {
                        'console': {
                            'level': 'DEBUG',
                            'class': 'logging.StreamHandler',
                            'formatter': 'simple'
                        },
                        'celery': {
                            'level': 'DEBUG',
                            'class': 'logging.handlers.RotatingFileHandler',
                            'filename': 'celery.log',
                            'formatter': 'standard',
                            'maxBytes': 1024 * 1024 * 100,  # 100 mb
                        },
                    },
                    'loggers': {
                        'celery': {
                            'handlers': ['celery', 'console'],
                            'level': 'DEBUG',
                        },
                    }
                }

                logging.Formatter.converter = time.gmtime
              path: /opt/mozdef/docker/compose/mozdef_alerts/files/config.py
            - content: |
                # This configures the worker that pulls in CloudTrail logs
                OPTIONS_TASKEXCHANGE=${CloudTrailSQSNotificationQueueName}
                OPTIONS_REGION=${AWS::Region}
              path: /opt/mozdef/docker/compose/cloudy_mozdef_mq_cloudtrail.env
            - content: |
                OPTIONS_TASKEXCHANGE=${MozDefSQSQueueName}
                OPTIONS_REGION=${AWS::Region}
              path: /opt/mozdef/docker/compose/cloudy_mozdef_mq_sqs.env
            - content: |
                [Unit]
                Description=Docker Compose container starter
                After=docker.service network-online.target
                Requires=docker.service network-online.target

                [Service]
                WorkingDirectory=/opt/mozdef
                Type=oneshot
                RemainAfterExit=yes

                ExecStart=/bin/docker-compose -f docker/compose/docker-compose-cloudy-mozdef.yml -p mozdef up -d

                ExecStop=/bin/docker-compose -f docker/compose/docker-compose-cloudy-mozdef.yml -p mozdef down

                [Install]
                WantedBy=multi-user.target
              path: /etc/systemd/system/docker-compose.service
            - content: |
                [options]
                api_url = http://rest:8081/getwatchlist
                jwt_secret = secret
                use_auth = false
              path: /opt/mozdef/docker/compose/mozdef_alerts/files/get_watchlist.conf
          runcmd:
            - echo RABBITMQ_PASSWORD=`python3 -c 'import secrets; s = secrets.token_hex(); print(s)'` > /opt/mozdef/docker/compose/rabbitmq.env
            - chmod --verbose 600 /opt/mozdef/docker/compose/rabbitmq.env
            - chmod --verbose 600 /opt/mozdef/docker/compose/cloudy_mozdef.env
            - chmod --verbose 600 /opt/mozdef/docker/compose/cloudy_mozdef_kibana.env
            - chmod --verbose 600 /opt/mozdef/docker/compose/cloudy_mozdef_mq_sqs.env
            - mkdir --verbose --parents ${EFSMountPoint}
            - echo '*.* @@127.0.0.1:514' >> /etc/rsyslog.conf
            - systemctl enable rsyslog
            - systemctl start rsyslog
            - grep "${EFSID}" /etc/fstab >/dev/null || echo "${EFSID}:/ ${EFSMountPoint} efs tls,_netdev" >> /etc/fstab
            - for i in 1 2 3 4 5 6; do mount --verbose --all --types efs defaults && break || sleep 15; done
            - cd /opt/mozdef && git pull origin master
            - systemctl daemon-reload
            - systemctl enable docker-compose
            - systemctl start docker-compose
            - sleep 10
            - cd /opt/mozdef && cat /opt/mozdef/docker/compose/rabbitmq.env | cut -d '=' -f2 | xargs docker-compose -f docker/compose/docker-compose.yml -p mozdef exec -T rabbitmq rabbitmqctl add_user mozdef
            - cd /opt/mozdef && docker-compose -f docker/compose/docker-compose.yml -p mozdef exec -T rabbitmq rabbitmqctl set_user_tags mozdef administrator
            - cd /opt/mozdef && docker-compose -f docker/compose/docker-compose.yml -p mozdef exec -T rabbitmq rabbitmqctl set_permissions -p / mozdef ".*" ".*" ".*"
  MozDefAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '1'
      LaunchConfigurationName: !Ref MozDefLaunchConfiguration
      MaxSize: '2'
      MinSize: '1'
      Tags:
        - Key: Name
          Value: mozdef
          PropagateAtLaunch: true
        - Key: application
          Value: mozdef
          PropagateAtLaunch: true
        - Key: stack
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref MozDefElasticLoadBalancingV2TargetGroup
        - !Ref MozDefElasticLoadBalancingV2TargetGroupKibana
      TerminationPolicies:
        - OldestLaunchConfiguration
      VPCZoneIdentifier: !Ref AutoScaleGroupSubnetIds
    UpdatePolicy:
     AutoScalingRollingUpdate:
       MinInstancesInService: 1
       MaxBatchSize: 1
       PauseTime: PT5S
  MozDefElasticLoadBalancingV2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref MozDefLoadBalancerSecurityGroupId
      Subnets: !Ref AutoScaleGroupSubnetIds
      Tags:
        - Key: application
          Value: mozdef
        - Key: stack
          Value: !Ref AWS::StackName
  MozDefElasticLoadBalancingV2ListenerKibanaSSL:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Condition: SSLEnabledCondition
    Properties:
      Certificates:
        - CertificateArn: !Ref ACMCertArn
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: MozDefElasticLoadBalancingV2TargetGroupKibana
      LoadBalancerArn:
        Ref: MozDefElasticLoadBalancingV2LoadBalancer
      Port: 9090
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
  MozDefElasticLoadBalancingV2ListenerKibana:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Condition: SSLNotEnabledCondition
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: MozDefElasticLoadBalancingV2TargetGroupKibana
      LoadBalancerArn:
        Ref: MozDefElasticLoadBalancingV2LoadBalancer
      Port: 9090
      Protocol: HTTP
  MozDefElasticLoadBalancingV2ListenerSSL:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Condition: SSLEnabledCondition
    Properties:
      Certificates:
        - CertificateArn: !Ref ACMCertArn
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: MozDefElasticLoadBalancingV2TargetGroup
      LoadBalancerArn:
        Ref: MozDefElasticLoadBalancingV2LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
  MozDefElasticLoadBalancingV2ListenerNoSSL:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Condition: SSLNotEnabledCondition
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: MozDefElasticLoadBalancingV2TargetGroup
      LoadBalancerArn:
        Ref: MozDefElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: HTTP
  MozDefElasticLoadBalancingV2ListenerRedirectSSL:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Condition: SSLEnabledCondition
    Properties:
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Host: '#{host}'
          Path: '/#{path}'
          Protocol: HTTPS
          Query: '#{query}'
          Port: '443'
          StatusCode: HTTP_302
      LoadBalancerArn:
        Ref: MozDefElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: HTTP
  MozDefElasticLoadBalancingV2ListenerRedirectSSLOIDC:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Condition: SSLEnabledWithOidcCondition
    Properties:
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Host: '#{host}'
          Path: '/#{path}'
          Protocol: HTTPS
          Query: '#{query}'
          Port: '443'
          StatusCode: HTTP_302
      LoadBalancerArn:
        Ref: MozDefElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: HTTP
  MozDefElasticLoadBalancingV2ListenerSSLOIDC:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Condition: SSLEnabledWithOidcCondition
    Properties:
      Certificates:
        - CertificateArn: !Ref ACMCertArn
      DefaultActions:
      - Type: authenticate-oidc
        AuthenticateOidcConfig:
          AuthorizationEndpoint: !Ref OIDCAuthorizationEndpoint
          ClientId: !Ref OIDCClientId
          ClientSecret: !Ref OIDCClientSecret
          Issuer: !Ref OIDCIssuer
          OnUnauthenticatedRequest: authenticate
          SessionCookieName: mozdefMeteor
          TokenEndpoint: !Ref OIDCTokenEndpoint
          UserInfoEndpoint: !Ref OIDCUserInfoEndpoint
          Scope: "openid email"
        Order: 1
      - Type: forward
        Order: 2
        TargetGroupArn:
          Ref: MozDefElasticLoadBalancingV2TargetGroup
      LoadBalancerArn:
        Ref: MozDefElasticLoadBalancingV2LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
  MozDefElasticLoadBalancingV2ListenerSSLKibanaOIDC:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Condition: SSLEnabledWithOidcCondition
    Properties:
      Certificates:
        - CertificateArn: !Ref ACMCertArn
      DefaultActions:
      - Type: authenticate-oidc
        AuthenticateOidcConfig:
          AuthorizationEndpoint: !Ref OIDCAuthorizationEndpoint
          ClientId: !Ref OIDCClientId
          ClientSecret: !Ref OIDCClientSecret
          Issuer: !Ref OIDCIssuer
          OnUnauthenticatedRequest: authenticate
          Scope: openid profile email
          SessionCookieName: mozdefMeteor
          TokenEndpoint: !Ref OIDCTokenEndpoint
          UserInfoEndpoint: !Ref OIDCUserInfoEndpoint
        Order: 1
      - Type: forward
        Order: 2
        TargetGroupArn:
          Ref: MozDefElasticLoadBalancingV2TargetGroupKibana
      LoadBalancerArn:
        Ref: MozDefElasticLoadBalancingV2LoadBalancer
      Port: 9090
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
Outputs:
  LoadBalancerDNSName:
    Description: The DNS name of the ALB hosting MozDef.  If using OIDC or SSL point your DNS at this.
    Value:
      Fn::GetAtt: [ MozDefElasticLoadBalancingV2LoadBalancer, DNSName ]
