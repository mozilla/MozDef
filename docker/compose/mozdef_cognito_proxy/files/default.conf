server {
    listen       8000;
    server_name  localhost;
    resolver 127.0.0.11;


    location = /health {
      return 200;
      access_log off;
    }


    location / {
        lua_need_request_body on;
        auth_basic_user_file /etc/nginx/htpasswd;
        set_by_lua_block $backend {return os.getenv("METEOR_BACKEND")}
        set_by_lua_block $auth_basic_set { if os.getenv("basic_auth_secret") == "" then return "no" else return "yes" end }
        set $auth_basic off;
        if ($auth_basic_set = yes) {
           set $auth_basic Restricted;
        }

        set_by_lua_block $user {
          if os.getenv("OIDC_CLIENT_ID") == "" then
            ngx.log(ngx.NOTICE, 'OIDC authentication is not in use.  Logging in as sample user.')
            return "mozdefuser@sample.com"
          else
            ngx.log(ngx.NOTICE, 'OIDC authentication in use.  Attempting to parse headers.')
            local resp = {headers=nil, body=nil}
            local json_safe = require "cjson.safe"
            local jwt = require "resty.jwt"
            resp.headers = ngx.req.get_headers()
            if resp.headers['x-amzn-oidc-data'] ~= nil then
              local jwt_obj = jwt:load_jwt(resp.headers['x-amzn-oidc-data'])
              resp['amzn-oidc-data'] = jwt_obj
              --resp.oidc = resp.headers['x-amzn-oidc-data']
            end
            resp.httpMethod = ngx.req.get_method()
            resp.queryStringParameters = ngx.req.get_uri_args()
            resp.path = ngx.var.uri
            if resp['amzn-oidc-data'] ~= nil then
              local email = resp['amzn-oidc-data']['payload']['email']
              ngx.log(ngx.NOTICE, 'Via header sent to meteor')
              return email
            else
              ngx.status = 403
            end
          end
        }
        auth_basic $auth_basic;
        proxy_set_header via $user;
        proxy_pass http://$backend;
    }
}

server {
    listen       8090;
    server_name  localhost;
    resolver 127.0.0.11;

    location = /health {
      return 200;
      access_log off;
    }

    location / {
        lua_need_request_body on;
        set_by_lua_block $backend {return os.getenv("ESBACKEND")}
        auth_basic_user_file /etc/nginx/htpasswd;
        set_by_lua_block $auth_basic_set { if os.getenv("OIDC_CLIENT_ID") == "" then return "yes" else return "no" end }
        set $auth_basic off;
        if ($auth_basic_set = yes) {
           set $auth_basic Restricted;
        }

        set_by_lua_block $user {
          if os.getenv("OIDC_CLIENT_ID") == "" then
            return "mozdefuser@sample.com"
          else
            local resp = {headers=nil, body=nil}
            local json_safe = require "cjson.safe"
            local jwt = require "resty.jwt"
            resp.headers = ngx.req.get_headers()
            if resp.headers['x-amzn-oidc-data'] ~= nil then
              local jwt_obj = jwt:load_jwt(resp.headers['x-amzn-oidc-data'])
              resp['amzn-oidc-data'] = jwt_obj
              --resp.oidc = resp.headers['x-amzn-oidc-data']
            end
            resp.httpMethod = ngx.req.get_method()
            resp.queryStringParameters = ngx.req.get_uri_args()
            resp.path = ngx.var.uri
            if resp['amzn-oidc-data'] ~= nil then
              return resp['amzn-oidc-data']['payload']['email']
            else
              ngx.status = 403
            end
          end
        }
        proxy_set_header       Authorization "";
        proxy_set_header via $user;
        auth_basic $auth_basic;
        proxy_pass $backend;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }
}
